# yaml-language-server: $schema=https://developer.microsoft.com/json-schemas/teams-toolkit/teamsapp-yaml/1.0.0/yaml.schema.json
# Visit https://aka.ms/teamsfx-v5.0-guide for details on this file
# Visit https://aka.ms/teamsfx-actions for details on actions
version: 1.0.0

provision:
  - uses: script
    with:
      run: |
        for ($i = 1; $i -le 3; $i++) {
          $endpoint = (Invoke-WebRequest -Uri "http://localhost:4040/api/tunnels" | Select-String -Pattern 'https://[a-zA-Z0-9 -\.]*\.ngrok-free\.app').Matches.Value
          if ($endpoint) {
            break
          }
          sleep 3
        }
        if (-not $endpoint) {
          echo "ERROR: Failed to find tunnel endpoint after 3 attempts."
          exit 1
        } else {
          echo "::set-teamsfx-env TAB_ENDPOINT=$endpoint"
          echo "::set-teamsfx-env TAB_DOMAIN=$($endpoint.Substring(8))"
          echo "::set-teamsfx-env PUBLIC_HOSTNAME=$($endpoint.Substring(8))"
          echo "::set-teamsfx-env TAB_APP_URI=api://$($endpoint.Substring(8))/${{TAB_APP_ID}}"
        }
  - uses: aadApp/create # Creates a new Azure Active Directory (AAD) app to authenticate users if the environment variable that stores clientId is empty
    with:
      name: yotabsso # Note: when you run aadApp/update, the AAD app name will be updated based on the definition in manifest. If you don't want to change the name, make sure the name in AAD manifest is the same with the name defined here.
      generateClientSecret: true # If the value is false, the action will not generate client secret for you
      signInAudience: "AzureADMyOrg" # Authenticate users with a Microsoft work or school account in your organization's Azure AD tenant (for example, single tenant).
    writeToEnvironmentFile: # Write the information of created resources into environment file for the specified environment variable(s).
      clientId: AAD_APP_CLIENT_ID
      clientSecret: SECRET_AAD_APP_CLIENT_SECRET # Environment variable that starts with `SECRET_` will be stored to the .env.{envName}.user environment file
      objectId: AAD_APP_OBJECT_ID
      tenantId: AAD_APP_TENANT_ID
      authority: AAD_APP_OAUTH_AUTHORITY
      authorityHost: AAD_APP_OAUTH_AUTHORITY_HOST
  - uses: teamsApp/create # Creates a Teams app
    with:
      name: yotabsso-${{TEAMSFX_ENV}} # Teams app name
    writeToEnvironmentFile:
      teamsAppId: APPLICATION_ID # Write the id of Teams app into environment file for the specified environment variable(s).
    # Output: following environment variable will be persisted in current environment's .env file.
    # TEAMS_APP_ID: the id of Teams app
  - uses: script # Set TAB_DOMAIN for local launch
    name: Set TAB_DOMAIN for local launch
    with:
      run: echo "::set-teamsfx-env TAB_DOMAIN=localhost:53000"
  - uses: script # Set TAB_ENDPOINT for local launch
    name: Set TAB_ENDPOINT for local launch
    with:
      run: echo "::set-teamsfx-env TAB_ENDPOINT=https://localhost:53000"
  - uses: script # Set PUBLIC_HOSTNAME for local launch
    name: Set PUBLIC_HOSTNAME for local launch
    with:
      run: echo "::set-teamsfx-env PUBLIC_HOSTNAME=${{PUBLIC_HOSTNAME}}"
  - uses: aadApp/update # Apply the AAD manifest to an existing AAD app. Will use the object id in manifest file to determine which AAD app to update.
    with:
      manifestPath: aad.manifest.json # Relative path to teamsfx folder. Environment variables in manifest will be replaced before apply to AAD app
      outputFilePath: build/aad.manifest.${{TEAMSFX_ENV}}.json
  - uses: teamsApp/validateManifest # This action is currently skipped, will be updated in the future version.
    with:
      manifestPath: ./appPackage/manifest.local.json # Path to manifest template
  - uses: teamsApp/zipAppPackage # Build Teams app package with latest env value
    with:
      manifestPath: ./appPackage/manifest.local.json # Path to manifest template
      outputZipPath: ./build/appPackage/appPackage.${{TEAMSFX_ENV}}.zip
      outputJsonPath: ./build/appPackage/manifest.${{TEAMSFX_ENV}}.json
  - uses: teamsApp/update # Apply the Teams app manifest to an existing Teams app in Teams Developer Portal. Will use the app id in manifest file to determine which Teams app to update.
    with:
      appPackagePath: ./build/appPackage/appPackage.${{TEAMSFX_ENV}}.zip # Relative path to this file. This is the path for built zip file.
      # appPackagePath: ./package/yotabsso.zip # Relative path to this file. This is the path for built zip file.
      # Output: following environment variable will be persisted in current environment's .env file.
      # TEAMS_APP_ID: the id of Teams app

deploy:
  - uses: devTool/install # Install development tool(s)
    with:
      devCert:
        trust: true
    writeToEnvironmentFile: # Write the information of installed development tool(s) into environment file for the specified environment variable(s).
      sslCertFile: SSL_CRT_FILE
      sslKeyFile: SSL_KEY_FILE

  - uses: cli/runNpmCommand # Run npm command
    with:
      args: install --no-audit
      workingDirectory: ./

  - uses: file/createOrUpdateEnvironmentFile # Generate runtime environment variables
    with:
      target: ./.localConfigs
      envs:
        BROWSER: none
        HTTPS: true
        PORT: 53000
        SSL_CRT_FILE: ${{SSL_CRT_FILE}}
        SSL_KEY_FILE: ${{SSL_KEY_FILE}}
        REACT_APP_CLIENT_ID: ${{AAD_APP_CLIENT_ID}}
        REACT_APP_START_LOGIN_PAGE_URL: ${{TAB_ENDPOINT}}/auth-start.html
